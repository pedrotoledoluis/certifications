# Plan de Estudios 

| Mes | Día de la Semana | Temática                                                                 | Links de Estudio (Actualizados y Detallados)                                                                                                                                                                                                                                                           | Ejercicios para Desarrollar y Practicar                                                                                                                                                                                                                                                                                             |
|-----|-------------------|--------------------------------------------------------------------------|--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| **1** | **Lunes** | **Backend: .NET Core Avanzado I** (Repaso ASP.NET Core, Inyección de Dependencias, Middleware) | 1.  Microsoft Learn: "Tutorial: Create a web API with ASP.NET Core" ([Buscar en Microsoft Learn](https://learn.microsoft.com/dotnet/aspnet/core/tutorials/first-web-api)) <br> 2. Documentación Oficial .NET: "Middleware in ASP.NET Core" ([Buscar en Microsoft Docs](https://docs.microsoft.com/aspnet/core/fundamentals/middleware/)) | Crear un proyecto Web API básico en .NET Core, implementando un middleware custom.                                                                                                                                                                                                                              |
| **1** | **Martes** | **Backend: .NET Core Avanzado II** (Entity Framework Core, LINQ, Async/Await) | 1.  Microsoft Learn: "Access data with Entity Framework Core and ASP.NET Core" ([Buscar en Microsoft Learn](https://learn.microsoft.com/ef/core/)) <br> 2. Documentación Oficial .NET: "Asynchronous programming with async and await" ([Buscar en Microsoft Docs](https://docs.microsoft.com/dotnet/csharp/async)) | Extender la API para interactuar con una base de datos usando EF Core (CRUD) y operaciones asíncronas.                                                                                                                                                                                                            |
| **1** | **Miércoles** | **Backend: Python con FastAPI** (Introducción, Rutas, Validación de Datos, Modelos Pydantic) | 1.  FastAPI Documentación Oficial: "Tutorial - User Guide" ([https://fastapi.tiangolo.com/tutorial/](https://fastapi.tiangolo.com/tutorial/)) <br> 2. FreeCodeCamp: "FastAPI Course for Beginners" (Buscar en YouTube)                                                                                      | Crear una API REST simple con FastAPI que incluya validación de datos para los endpoints.                                                                                                                                                                                                                               |
| **1** | **Jueves** | **Backend: Python con Flask** (Introducción, Rutas, Templates básicos, Comparación con FastAPI) | 1.  Flask Documentación Oficial: "Quickstart" ([https://flask.palletsprojects.com/](https://flask.palletsprojects.com/)) <br> 2. Real Python: "Flask by Example series" (Buscar en Real Python)                                                                                                               | Desarrollar una pequeña aplicación web o API con Flask. Comparar la estructura y verbosidad con FastAPI para un caso de uso similar.                                                                                                                                                                         |
| **1** | **Viernes** | **Bases de Datos: SQL Server & PostgreSQL Avanzado** (Consultas complejas, Índices, Optimización básica) | 1.  Microsoft SQL Docs: "Query Performance Tuning" ([Buscar en Microsoft Docs](https://docs.microsoft.com/sql/relational-databases/performance/query-tuning-assistant)) <br> 2. PostgreSQL Tutorial: "Performance Tips" ([https://www.postgresqltutorial.com/postgresql-administration/postgresql-performance-tuning/](https://www.postgresqltutorial.com/postgresql-administration/postgresql-performance-tuning/)) | Escribir y optimizar consultas SQL complejas (joins, subqueries, CTEs) en SQL Server y PostgreSQL. Crear y analizar el impacto de índices.                                                                                                                                             |
| **1** | **Sábado** | **Repaso Semanal y Práctica Backend** | Revisar todos los temas de la semana.                                                                                                                                                                                                                                                                 | Iniciar un mini-proyecto: Una API que combine .NET Core o Python, conectada a SQL Server o PostgreSQL, exponiendo algunos endpoints CRUD.                                                                                                                                                                        |
| **1** | **Domingo** | **Frontend: React.js Fundamentos** (JSX, Componentes, Props, State, Ciclo de Vida/Hooks) | 1.  React Documentación Oficial: "Tutorial: Intro to React" ([https://react.dev/learn](https://react.dev/learn)) <br> 2. FreeCodeCamp: "React Course - Beginner's Tutorial" (Buscar en YouTube)                                                                                                       | Crear una aplicación simple de "To-Do List" con React, manejando el estado y los eventos.                                                                                                                                                                                                                              |
| **1** | **Lunes (Sem 2)** | **Frontend: React.js Avanzado** (Hooks avanzados: useContext, useReducer, Custom Hooks, State Management - ej. Zustand/Redux Toolkit intro) | 1.  React Documentación Oficial: "Hooks API Reference" ([https://react.dev/reference/react](https://react.dev/reference/react)) <br> 2. Blog de LogRocket: "React Context vs Redux" (Buscar en LogRocket)                                                                                                 | Refactorizar la "To-Do List" usando `useContext` o `useReducer` para el manejo del estado. Crear un custom hook.                                                                                                                                                                                                           |
| **1** | **Martes (Sem 2)**| **Frontend: Next.js** (Routing, SSR, SSG, API Routes, Layouts)          | 1.  Next.js Documentación Oficial: "Getting Started" ([https://nextjs.org/docs](https://nextjs.org/docs)) <br> 2. Vercel: "Learn Next.js" ([https://nextjs.org/learn](https://nextjs.org/learn))                                                                                                              | Crear un blog simple con Next.js, utilizando SSG para los posts y SSR para una página dinámica. Implementar una API route.                                                                                                                                                                                           |
| **1** | **Miércoles (Sem 2)**| **Arquitectura: Clean Architecture** (Principios, Capas, Dependencias)   | 1.  Blog de Robert C. Martin (Uncle Bob): "The Clean Architecture" ([https://blog.cleancoder.com/uncle-bob/2012/08/13/the-clean-architecture.html](https://blog.cleancoder.com/uncle-bob/2012/08/13/the-clean-architecture.html)) <br> 2. Jason Taylor: "Clean Architecture with .NET Core" (Buscar en GitHub/YouTube) | Diseñar (en papel o diagrama) la estructura de un proyecto pequeño aplicando los principios de Clean Architecture. Identificar las capas y sus responsabilidades.                                                                                                                                       |
| **1** | **Jueves (Sem 2)**| **Arquitectura: DDD (Domain-Driven Design) - Introducción** (Lenguaje Ubicuo, Contextos Delimitados, Entidades, Agregados) | 1.  DDD Community: "DDD Reference" ([https://dddcommunity.org/learning-ddd/ddd_reference/](https://dddcommunity.org/learning-ddd/ddd_reference/)) <br> 2. InfoQ: "Domain-Driven Design Quickly" (Libro/Resumen)                                                                                           | Para un dominio de negocio simple (ej. E-commerce básico), identificar posibles contextos delimitados, entidades clave y agregados. Definir un lenguaje ubicuo para un contexto.                                                                                                                          |
| **1** | **Viernes (Sem 2)**| **Control de Versiones: Git & GitFlow** (Branching, Merging, Pull Requests, Estrategias) | 1.  Atlassian Git Tutorial: "Comparing Workflows - Gitflow Workflow" ([https://www.atlassian.com/git/tutorials/comparing-workflows/gitflow-workflow](https://www.atlassian.com/git/tutorials/comparing-workflows/gitflow-workflow)) <br> 2. GitHub Docs: "Collaborating with pull requests" ([Buscar en GitHub Docs](https://docs.github.com/)) | Simular un flujo de trabajo GitFlow en un repositorio local: crear feature branches, release branches, hotfixes. Realizar PRs y merges.                                                                                                                                                                    |
| **1** | **Sábado (Sem 2)**| **Repaso Semanal y Práctica Frontend/Arquitectura** | Revisar todos los temas de la semana.                                                                                                                                                                                                                                                                 | Continuar el mini-proyecto API e iniciar un frontend simple con React/Next.js para consumir la API. Aplicar conceptos de Clean Architecture en el backend si es posible.                                                                                                                                     |
| **1** | **Domingo (Sem 2)**| **DevOps: Introducción a CI/CD** (Conceptos, Beneficios, Herramientas comunes) | 1.  Atlassian: "Continuous integration vs. continuous delivery vs. continuous deployment" ([https://www.atlassian.com/continuous-delivery/principles/continuous-integration-vs-delivery-vs-deployment](https://www.atlassian.com/continuous-delivery/principles/continuous-integration-vs-delivery-vs-deployment)) <br> 2. Red Hat: "What is CI/CD?" ([https://www.redhat.com/en/topics/devops/what-is-ci-cd](https://www.redhat.com/en/topics/devops/what-is-ci-cd)) | Investigar y comparar las características principales de Azure DevOps y AWS CodePipeline. Diagramar un pipeline CI/CD simple.                                                                                                                                                                   |
| **2** | **Lunes (Sem 3)** | **Arquitectura: Microservicios I** (Principios, Ventajas, Desafíos, Patrones de Diseño) | 1.  Microservices.io por Chris Richardson ([https://microservices.io/](https://microservices.io/)) <br> 2. Microsoft Learn: "Design a microservices architecture" ([Buscar en Microsoft Learn](https://learn.microsoft.com/azure/architecture/microservices/))                                                                                     | Diseñar la arquitectura de microservicios para una aplicación (ej. un sistema de pedidos simplificado). Identificar servicios, responsabilidades y cómo se comunicarían.                                                                                                                                                        |
| **2** | **Martes (Sem 3)**| **Arquitectura: Microservicios II** (Comunicación: Síncrona/Asíncrona, Service Discovery, API Gateway) | 1.  NGINX: "Building Microservices: Inter-Process Communication in a Microservices Architecture" ([Buscar en NGINX blog](https://www.nginx.com/blog/building-microservices-inter-process-communication/)) <br> 2. AWS: "API Gateway" / Azure: "API Management" (Documentación oficial)                                                   | Implementar dos microservicios pequeños (usando .NET Core o Python/FastAPI) que se comuniquen entre sí (primero síncrono, luego investigar cómo sería asíncrono). Configurar un API Gateway básico si se usa una plataforma cloud.                                                                                           |
| **2** | **Miércoles (Sem 3)**| **Arquitectura: Event-Driven (EDA) I** (Conceptos, Patrones: Pub/Sub, Event Sourcing intro) | 1.  Microsoft Azure: "Event-driven architecture style" ([https://learn.microsoft.com/azure/architecture/guide/architecture-styles/event-driven](https://learn.microsoft.com/azure/architecture/guide/architecture-styles/event-driven)) <br> 2. Confluent: "What is Event-Driven Architecture?" ([https://www.confluent.io/learn/event-driven-architecture/](https://www.confluent.io/learn/event-driven-architecture/)) | Diagramar un flujo de eventos para un escenario (ej. un usuario se registra, se envía un email de bienvenida, se actualiza un contador de usuarios). Investigar brokers de mensajes como RabbitMQ o Kafka (conceptualmente).                                                                                           |
| **2** | **Jueves (Sem 3)**| **Arquitectura: Event-Driven (EDA) II** (Message Brokers - Conceptual, Idempotencia, Consistencia Eventual) | 1.  AWS / Azure documentación sobre sus servicios de mensajería (SQS, SNS / Service Bus, Event Grid) <br> 2. InfoQ: "Ensuring Idempotency in Event-Driven Systems" (Buscar en InfoQ)                                                                                                                                            | Investigar cómo implementar la comunicación asíncrona del ejercicio de Microservicios II usando un patrón Pub/Sub con un broker de mensajes (conceptual, o con un Docker local de RabbitMQ si hay tiempo).                                                                                                                       |
| **2** | **Viernes (Sem 3)**| **Cloud: Azure Fundamentos** (Core Services: Compute (VMs, App Service), Storage (Blob), Bases de Datos (Azure SQL)) | 1.  Microsoft Learn: "Azure Fundamentals part 1: Describe core Azure concepts" ([https://learn.microsoft.com/training/paths/az-900-describe-core-azure-concepts/](https://learn.microsoft.com/training/paths/az-900-describe-core-azure-concepts/))                                                                                         | Crear una cuenta gratuita de Azure. Desplegar una aplicación web simple en Azure App Service. Crear una cuenta de Blob Storage y subir/descargar archivos.                                                                                                                                                                    |
| **2** | **Sábado (Sem 3)**| **Cloud: AWS Fundamentos** (Core Services: EC2, S3, Lambda, RDS, VPC)                | 1.  AWS Training: "AWS Cloud Practitioner Essentials" ([https://aws.amazon.com/training/digital/aws-cloud-practitioner-essentials/](https://aws.amazon.com/training/digital/aws-cloud-practitioner-essentials/))                                                                                                            | Crear una cuenta gratuita de AWS. Lanzar una instancia EC2 e instalar un servidor web simple. Crear un bucket S3 y subir/descargar archivos. Explorar la consola de Lambda.                                                                                                                                                |
| **2** | **Domingo (Sem 3)**| **Repaso Semanal y Práctica Cloud/Arquitecturas** | Revisar todos los temas de la semana.                                                                                                                                                                                                                                                                 | Intentar desplegar uno de los microservicios creados en Azure App Service o AWS EC2/Elastic Beanstalk.                                                                                                                                                                                                                        |
| **2** | **Lunes (Sem 4)** | **DevOps: Azure DevOps (CI/CD)** (Pipelines, Repos, Artifacts)                       | 1.  Microsoft Learn: "Get started with Azure DevOps" ([https://learn.microsoft.com/azure/devops/user-guide/what-is-azure-devops](https://learn.microsoft.com/azure/devops/user-guide/what-is-azure-devops)) <br> 2. Azure DevOps Labs ([https://www.azuredevopslabs.com/](https://www.azuredevopslabs.com/))                                            | Crear un pipeline CI/CD en Azure DevOps para un proyecto de ejemplo (.NET o Node.js) que compile, pruebe y despliegue (a un entorno de prueba).                                                                                                                                                                       |
| **2** | **Martes (Sem 4)**| **DevOps: AWS CI/CD Tools** (CodeCommit, CodeBuild, CodeDeploy, CodePipeline)         | 1.  AWS Documentation: "Developer Tools" ([https://aws.amazon.com/products/developer-tools/](https://aws.amazon.com/products/developer-tools/)) <br> 2. AWS Tutorial: "Create a simple pipeline (S3 bucket)" ([Buscar en AWS Docs](https://docs.aws.amazon.com/codepipeline/latest/userguide/tutorials-simple-s3.html)) | Explorar la creación de un pipeline básico en AWS CodePipeline para desplegar una aplicación estática a S3.                                                                                                                                                                                                       |
| **2** | **Miércoles (Sem 4)**| **DevOps: Docker** (Contenedores, Dockerfile, Docker Compose)                       | 1.  Docker Documentación Oficial: "Get Started" ([https://docs.docker.com/get-started/](https://docs.docker.com/get-started/)) <br> 2. FreeCodeCamp: "Docker Tutorial for Beginners" (Buscar en YouTube)                                                                                                      | Dockerizar una de las aplicaciones (backend o frontend) creadas anteriormente. Crear un archivo `docker-compose.yml` para orquestar la aplicación con su base de datos.                                                                                                                                                  |
| **2** | **Jueves (Sem 4)**| **DevOps: Kubernetes (Deseable) - Introducción** (Conceptos: Pods, Services, Deployments, Namespaces) | 1.  Kubernetes Documentación Oficial: "Kubernetes Basics" ([https://kubernetes.io/docs/tutorials/kubernetes-basics/](https://kubernetes.io/docs/tutorials/kubernetes-basics/)) <br> 2. YouTube: "Kubernetes Explained in 100 Seconds" (Buscar en Fireship)                                                          | Instalar Minikube o Kind localmente. Desplegar una aplicación simple en un clúster local de Kubernetes. Exponerla a través de un Service. (Este es un tema denso, enfócate en los conceptos si el tiempo es limitado).                                                                                              |
| **2** | **Viernes (Sem 4)**| **Seguridad: OWASP Top 10** (Comprensión y Mitigación básica de vulnerabilidades comunes) | 1.  OWASP Top 10 Oficial ([https://owasp.org/www-project-top-ten/](https://owasp.org/www-project-top-ten/)) <br> 2. PortSwigger Web Security Academy: "OWASP Top 10" ([https://portswigger.net/web-security/owasp-top-10](https://portswigger.net/web-security/owasp-top-10))                                                    | Para cada uno de los OWASP Top 10, identificar ejemplos de cómo podría manifestarse en una aplicación web y qué medidas preventivas se pueden tomar a nivel de código o infraestructura.                                                                                                                            |
| **2** | **Sábado (Sem 4)**| **Calidad: Testing (Unit/Integration), SonarQube** (Conceptos y Herramientas)    | 1.  Microsoft Docs: "Unit testing C# with MSTest, NUnit, xUnit" ([Buscar en Microsoft Docs](https://docs.microsoft.com/dotnet/core/testing/)) <br> 2. SonarQube Documentación ([https://docs.sonarqube.org/latest/](https://docs.sonarqube.org/latest/)) <br> 3. Martin Fowler: "Integration Test" ([https://martinfowler.com/bliki/IntegrationTest.html](https://martinfowler.com/bliki/IntegrationTest.html)) | Escribir tests unitarios para las funcionalidades clave de uno de tus mini-proyectos. Investigar cómo escribir tests de integración para la comunicación entre servicios o con la BD. Instalar SonarQube localmente (o usar SonarCloud) y analizar un proyecto.                                            |
| **2** | **Domingo (Sem 4)**| **Seguridad: ISO 27001 (Nociones)** y Repaso Mensual                               | 1.  ISO.org: "ISO/IEC 27001 Information security management" ([https://www.iso.org/isoiec-27001-information-security.html](https://www.iso.org/isoiec-27001-information-security.html)) <br> 2. IT Governance UK: "What is ISO 27001?" ([https://www.itgovernance.co.uk/what-is-iso-27001](https://www.itgovernance.co.uk/what-is-iso-27001)) | Entender los objetivos principales de ISO 27001 y cómo impacta las prácticas de desarrollo de software (gestión de riesgos, controles de seguridad). Revisar todos los temas del mes.                                                                                                                               |
| **3** | **Lunes (Sem 5)** | **Metodologías Ágiles: Scrum** (Roles, Eventos, Artefactos, Valores)       | 1.  Scrum.org: "The Scrum Guide" ([https://scrumguides.org/](https://scrumguides.org/)) <br> 2. Atlassian Agile Coach: "Scrum" ([https://www.atlassian.com/agile/scrum](https://www.atlassian.com/agile/scrum))                                                                                                         | Simular un Sprint Planning para un proyecto pequeño. Definir un Product Backlog y un Sprint Backlog. Identificar los roles en un equipo Scrum hipotético para uno de tus proyectos.                                                                                                                                                                   |
| **3** | **Martes (Sem 5)**| **Metodologías Ágiles: Kanban** (Principios, Prácticas, Métricas de Flujo) | 1.  Kanban University: "What is Kanban?" ([https://kanban.university/what-is-kanban/](https://kanban.university/what-is-kanban/)) <br> 2. Atlassian Agile Coach: "Kanban" ([https://www.atlassian.com/agile/kanban](https://www.atlassian.com/agile/kanban))                                                                          | Diseñar un tablero Kanban para gestionar las tareas de uno de tus proyectos. Definir columnas, WIP limits y políticas explícitas.                                                                                                                                                                                                                         |
| **3** | **Miércoles (Sem 5)**| **Liderazgo Técnico I** (Mentoring, Delegación, Feedback Efectivo)          | 1.  Google re:Work: "Manager" ([https://rework.withgoogle.com/subjects/managers/](https://rework.withgoogle.com/subjects/managers/)) <br> 2. Harvard Business Review: Artículos sobre liderazgo y feedback (Buscar "HBR giving feedback", "HBR delegation")                                                            | Reflexionar sobre experiencias pasadas donde has mentorizado o has sido mentorizado. ¿Qué funcionó? ¿Qué no? Preparar un escenario donde necesites dar feedback constructivo a un miembro del equipo.                                                                                                                                          |
| **3** | **Jueves (Sem 5)**| **Liderazgo Técnico II** (Comunicación, Resolución de Conflictos, Toma de Decisiones Técnicas) | 1.  Radical Candor by Kim Scott (Resumen o libro) <br> 2. MindTools: "Conflict Resolution" ([https://www.mindtools.com/pages/article/newLDR_81.htm](https://www.mindtools.com/pages/article/newLDR_81.htm))                                                                                                      | Plantear un escenario técnico con múltiples soluciones posibles. Practicar cómo argumentarías tu elección y cómo facilitarías una discusión de equipo para tomar la mejor decisión.                                                                                                                                                          |
| **3** | **Viernes (Sem 5)**| **DevOps: DevSecOps** (Integrando Seguridad en CI/CD, Herramientas SAST/DAST - conceptual) | 1.  Red Hat: "What is DevSecOps?" ([https://www.redhat.com/en/topics/devops/what-is-devsecops](https://www.redhat.com/en/topics/devops/what-is-devsecops)) <br> 2. OWASP: "OWASP DevSecOps Guideline" ([https://owasp.org/www-project-devsecops-guideline/](https://owasp.org/www-project-devsecops-guideline/))                                              | Investigar cómo integrar herramientas de análisis de seguridad estático (SAST) como SonarQube (con sus reglas de seguridad) o Snyk en un pipeline de CI/CD.                                                                                                                                                                        |
| **3** | **Sábado (Sem 5)**| **BI y Datos: Nociones de ETL y Data Lake** (Conceptos, Casos de Uso)      | 1.  AWS: "What is an ETL Process?" ([https://aws.amazon.com/etl/](https://aws.amazon.com/etl/)) <br> 2. Azure: "What is a data lake?" ([https://azure.microsoft.com/solutions/data-lake/](https://azure.microsoft.com/solutions/data-lake/))                                                                                | Diagramar un proceso ETL simple para un caso de uso (ej. extraer datos de ventas de una BD, transformarlos y cargarlos en un modelo para reportes). Entender la diferencia entre Data Warehouse y Data Lake.                                                                                                                  |
| **3** | **Domingo (Sem 5)**| **BI y Datos: Power BI (Introducción)** (Conexión a datos, Visualizaciones básicas) | 1.  Microsoft Learn: "Get started with Microsoft data analytics - Power BI" ([https://learn.microsoft.com/training/paths/get-started-data-analytics/](https://learn.microsoft.com/training/paths/get-started-data-analytics/)) <br> 2. YouTube: "Power BI Tutorial for Beginners" (Buscar en Guy in a Cube)              | Descargar Power BI Desktop. Conectar a una fuente de datos simple (ej. un archivo CSV o Excel de tus proyectos) y crear un dashboard básico con algunas visualizaciones.                                                                                                                                              |
| **3** | **Lunes (Sem 6)** | **Colaboración con Producto y Arquitectura** (Entendimiento de Requisitos, Alineación Estratégica) | 1.  ProductPlan: "Working with Product Management: A Developer's Guide" ([Buscar en ProductPlan blog](https://www.productplan.com/)) <br> 2. Pragmatic Institute: Recursos sobre Product Management.                                                                                                           | Simular una reunión donde como Líder Técnico debes discutir los requisitos de una nueva funcionalidad con un Product Manager. ¿Qué preguntas harías? ¿Cómo alinearías las decisiones técnicas con la estrategia del producto?                                                                                             |
| **3** | **Martes (Sem 6)**| **Promoción de Innovación Tecnológica** (Evaluación de nuevas librerías/frameworks, Pruebas de Concepto) | 1.  ThoughtWorks Technology Radar ([https://www.thoughtworks.com/radar](https://www.thoughtworks.com/radar)) <br> 2. InfoQ: Artículos sobre tendencias tecnológicas.                                                                                                                                          | Elegir una tecnología emergente o una nueva librería relevante para tu stack. Investigarla y preparar una breve presentación (para ti mismo) sobre sus pros, contras y posibles casos de uso.                                                                                                                              |
| **3** | **Miércoles (Sem 6)**| **Proyecto Integrador: Diseño de Sistema** | Aplicar todos los conocimientos.                                                                                                                                                                                                                                                                             | Tomar los requisitos de la descripción del puesto y diseñar (a alto nivel) un sistema que podría ser relevante para esa empresa. Considerar arquitectura, tecnologías, CI/CD, seguridad.                                                                                                                            |
| **3** | **Jueves (Sem 6)**| **Proyecto Integrador: Presentación y Justificación** | Comunicación de decisiones técnicas.                                                                                                                                                                                                                                                                         | Preparar una breve presentación de tu diseño de sistema, justificando las decisiones tomadas. Practicar la comunicación clara y concisa de conceptos técnicos complejos.                                                                                                                                                    |
| **3** | **Viernes (Sem 6)**| **Repaso General y Áreas Débiles** | Revisar notas, ejercicios y temas donde te sientas menos seguro.                                                                                                                                                                                                                                               | Volver a los ejercicios que fueron más desafiantes. Realizar Q&A contigo mismo sobre los temas clave.                                                                                                                                                                                                                           |
| **3** | **Sábado (Sem 6)**| **Preparación para Entrevistas (Técnicas y de Liderazgo)** | Búsqueda de preguntas comunes para Líderes Técnicos.                                                                                                                                                                                                                                                         | Practicar respuestas a preguntas tipo: "Describe una vez que lideraste un proyecto desafiante", "Cómo manejas desacuerdos técnicos en el equipo?", "Explica X concepto técnico a alguien no técnico".                                                                                                                  |
| **3** | **Domingo (Sem 6)**| **Descanso y Reflexión Final** | Relajarse y consolidar mentalmente el aprendizaje.                                                                                                                                                                                                                                                             | Evaluar tu progreso, identificar los próximos pasos después de estos 3 meses.                                                                                                                                                                                                                                                 |

---

## Consejos Adicionales:

* **Networking:** Si es posible, habla con personas que ya desempeñen roles de Líder Técnico. Sus insights pueden ser muy valiosos.
* **Proyectos Personales:** Intenta aplicar lo aprendido en proyectos personales que te motiven. Esto solidificará tu conocimiento y te dará ejemplos concretos para entrevistas.
* **Contribuciones Open Source:** Si el tiempo lo permite, contribuir a proyectos open source es una excelente forma de aprender y demostrar tus habilidades.
* **Mantén la Curiosidad:** El aprendizaje nunca termina en tecnología. Cultiva el hábito de explorar nuevas herramientas y conceptos.

¡Mucha suerte con tu preparación!
